const lz4 = require('lz4');
const path = require('path');
const fs = require('fs');
const readline = require("readline")

const inputDir = 'data';

const outputDir = process.argv[2];

const dirParts = path.join(outputDir, 'compressed_data').split(path.sep);

const dataDir = dirParts.reduce((prev, curr) => {
    const dataDir = path.join(prev, curr);
    if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir);
    return dataDir;
}, '');


new Promise((resolve, reject) => fs.readdir(inputDir, (err, files) => err ? reject(err) : resolve(files)))
    .then(files => Promise.all(files.map(basename => new Promise((resolve, reject) => {
        const inputPath = path.join(inputDir, basename)
        const outputPath = path.join(dataDir, path.basename(basename, '.txt')) + '.lz4'

        const object = {};
        return new Promise((resolve, reject) => fs.stat(inputPath, (err, istats) => err ? reject(err) : fs.stat(outputPath, (err, ostats) => err ? resolve(true) : resolve(istats.mtime > ostats.mtime))))
            .then(outOfDate => outOfDate ? readline.createInterface({
                input: fs.createReadStream(inputPath, 'utf8')
            }).on('line', line => {
                const [key, ...value] = line.split(/\t|,/);
                object[key] = value;
            }).on('close', () => fs.writeFile(outputPath, lz4.encode(Buffer.from(JSON.stringify(object))), err => err ? reject(err) : resolve(outputPath))) : resolve(outputPath));
    }))))
    .then(files => new Promise((resolve, reject) => {
        const lines = []
        lines.push(`/* Autogenerated file, do not modify! */`)
        lines.push(`import readIntoMap from "${path.relative(outputDir, 'src/readIntoMap').split(path.sep).join('/')}"`)

        files.forEach(file => {
            const importPath = './' + path.join(path.relative(outputDir, dataDir), path.basename(file)).split(path.sep).join('/')
            const shortname = path.basename(file, '.lz4')
            const shortnameIn = '__' + shortname;
            lines.push(`const ${shortnameIn} = require('${importPath}').default;`);
            lines.push(`export const ${shortname} = readIntoMap(${shortnameIn})`)
        })

        fs.writeFile(path.join(outputDir, 'main.ts'), lines.join('\n'), err => err ? reject(err) : resolve())
    })).catch(reason => { throw new Error(reason) })